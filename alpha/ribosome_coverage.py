# -*- coding: utf-8 -*-

import random
import os
import re
import logging
from alpha.orf_finder import get_max_orf



def is_pair(x, y):
    if (x, y) == ('A', "T") or (x, y) == ('T', 'A'):
        return True
    if (x, y) == ("C", "G") or (x, y) == ("G", "C"):
        return True

    return False


def find_free_energy(seq, trna):

    fileno = random.randint(1, 10000)
    filename = "seqs" + str(fileno) + ".in"

    with open(filename, "w") as f:
        f.write(">trna" + "\n")
        f.write(seq + "\n")
        f.write(">seq" + str(fileno) + "\n")
        f.write(seq + "\n")


    os.system("rnaup --no_header --interaction_pairwise -b <" + filename)

    output_filename = "trna_seq" + str(fileno) + "_w25_u1.out"
    isfree= paraphase(output_filename)
    logging.warning("The length of is_free is" + str(len(isfree)))
    rc = 0
    for i in range(len(seq)):
        if isfree[i]:
            rc += sum([is_pair(seq[i+j], trna[j])
                      for j in range(min(len(trna), len(seq) - i))])

    ret = isfree

    os.system("rm ./" + filename)
    os.system("rm ./" + output_filename)


    return rc


def paraphase(filename):

    with open(filename, "r") as f:
        lines = f.readlines()
        table = [re.split("\s+", l) for l in lines]
        table = [[x for x in l if len(x) > 0] for l in table if len(l) > 0]
        table = table[1:]

    return [float(table[i][2]) < 0 for i in range(len(table))]

def get_ribosome_coverage(seq, orf_start, orf_len, trna):
    transcript_rc = find_free_energy(seq, trna)
    orf_rc = find_free_energy(seq[orf_start:orf_start+orf_len], trna)
    utr3_rc = find_free_energy(seq[orf_start+orf_len:], trna)
    rrs = (orf_rc / orf_len) / (utr3_rc / (len(seq) - orf_start - orf_len))

    return [transcript_rc, orf_rc, utr3_rc, rrs]

if __name__ == '__main__':

    seq2 = "CCCCTGAAAGCTGGCGAGGCGCGCGCGCTCCCGCGGCACGCCGCGCCTCCGCCCTCCGCCCGCCAACCCGCTGGTCCAGTCCCTCTTCGCGCCCGCTTGGCTCCGCCCCCTTCCCAATTCGCTCCTCCCCCAACAGACTGGCGGCGCGCGGAAAACGCGTCACGTGACGACTGGCCCCGCCTCTTCCTCTCGGTCCCATATTGAACTCGAGTTGGAAGAGGCGAGTCCGGTCTCAAAATGGAGGTAAAACCGCCGCCCGGTCGCCCCCAGCCCGACTCCGGCCGTCGCCGTCGCCGCCGGGGGGAGGAGGGCCATGATCCAAAGGAACCAGAGCAGTTGAGAAAACTGTTTATTGGTGGTCTGAGCTTTGAAACTACAGATGATAGTTTACGAGAACATTTTGAGAAATGGGGCACACTCACAGATTGTGTGGTAATGAGAGACCCCCAAACAAAACGTTCCAGGGGCTTTGGTTTTGTGACTTATTCTTGTGTTGAAGAGGTGGATGCAGCAATGTGTGCTCGACCACACAAGGTTGATGGGCGTGTAGTGGAACCAAAGAGAGCTGTTTCTAGAGAGGATTCTGTAAAGCCTGGTGCCCATCTAACAGTGAAGAAAATTTTTGTTGGTGGTATTAAAGAAGATACAGAAGAATATAATTTGAGAGACTACTTTGAAAAGTATGGCAAGATTGAAACCATAGAAGTTATGGAAGACAGGCAGAGTGGAAAAAAGAGAGGATTTGCTTTTGTAACTTTTGATGATCATGATACAGTTGATAAAATTGTTGTTCAGAAATACCACACTATTAATGGGCATAATTGTGAAGTGAAAAAGGCCCTTTCTAAACAAGAGATGCAGTCTGCTGGATCACAGAGAGGTCGTGGAGGTGGATCTGGCAATTTTATGGGTCGCGGAGGGAACTTTGGAGGTGGTGGAGGTAATTTTGGCCGTGGTGGAAACTTTGGTGGAAGAGGAGGCTATGGTGGTGGAGGTGGTGGCAGCAGAGGTAGTTATGGAGGAGGTGATGGTGGATATAATGGATTTGGAGGTGATGGTGGCAACTATGGCGGTGGTCCTGGTTATAGTAGTAGAGGGGGCTATGGTGGTGGTGGACCAGGATATGGAAACCAAGGTGGTGGATATGGTGGAGGTGGAGGATATGATGGTTACAATGAAGGAGGAAATTTTGGCGGTGGTAACTATGGTGGTGGTGGGAACTATAATGATTTTGGAAATTATAGTGGACAACAGCAATCAAATTATGGACCCATGAAAGGGGGCAGTTTTGGTGGAAGAAGCTCGGGCAGTCCCTATGGTGGTGGTTATGGATCTGGTGGTGGAAGTGGTGGATATGGTAGCAGAAGGTTCTAAAAACAGCAGAAAAGGGCTACAGTTCTTAGCAGGAGAGAGAGCGAGGAGTTGTCAGGAAAGCTGCAGGTTACTTTGAGACAGTCGTCCCAAATGCATTAGAGGAACTGTAAAAATCTGCCACAGAAGGAACGATGATCCATAGTCAGAAAAGTTACTGCAGCTTAAACAGGAAACCCTTCTTGTTCAGGACTGTCATAGCCACAGTTTGCAAAAAGTGCAGCTATTGATTAATGCAATGTAGTGTCAATTAGATGTACATTCCTGAGGTCTTTTATCTGTTGTAGCTTTGTCTTTTTCTTTTTCTTTTCATTACATCAGGTATATTGCCCTGTAAATTGTGGTAGTGGTACCAGGAATAAAAAATTAAGGAATTTTTAACTTTTCAATATTTGTGTAGTTCAGTTTTTCTACATTTTAGTACAGAAACTTTAACAAAATGCAGTTTCGAAGGTGTTTCCTTGTGAGTTAACAAGTAAAGAAGATCATTGTTAATTACTATTTTGTATGAATTTTGCTAAAGTTAACTGTAAAGAAACACCTGCTGACTTGCAGTTTAAGGGGAATCTATTCTCCCCATTTCCAAACCATGATATGAATGGGCGCTGACATGTGGAGAGAATAGATAATTTGTGTGTTTGCAATGTGTGTTTTAGATAAATAGGATTGGGTATTTAAATTAGCATTTGTGAATTT"
    trna = "GTCTGCCCTATCAACTTTCGATGGTAGTCGCCGTGCCTACCATGGTGACCACGGGTGACGGGGAATCAGGGTTCGATTCCGGAGAGGGAGCCTGAGAAACGGCTACCACATCCAAGGAAGGCAGCAGGCGCGCAAATTACCCACTCCCGACCCGGGGAGGTAGTGACGAAAAATAACAATACAGGACTCTTTCGAGGCCCTGTAATTGGAATGAGTCCACTTTAAATCCTTTAACGAGGATCCATTGGAGGGCAAGTCTGGTGCCAGCAGCCGCGGTAATTCCAGCTCCAATAGCGTATATTAAAGTTGCTGCAGTTAAAAAGCTCGTAGTTGGATCTTGGGAGCGGGCGGGCGGTCCGCCGCGAGGCGAGCCACCGCCCGTCCCCGCCCCTTGCCTCTCGGCGCCCCCTCGATGCTCTTAGCTGAGTGTCCCGCGGGGCCCGAAGCGTTTACTTTGAAAAAATTAGAGTGTTCAAAGCAGGCCCGAGCCGCCTGGATACCGCAGCTAGGAATAATGGAATAGGACCGCGGTTCTATTTTGTTGGTTTTCGGAACTGAGGCCATGATTAAGAGGGACGGCCGGGGGCATTCGTATTGCGCCGCTAGAGGTGAAATTCTTGGACCGGCGCAAGACGGACCAGAGCGAAAGCATTTGCCAAGAATGTTTTCATTAATCAAGAACGAAAGTCGGAGGTTCGAAGACGATCAGATACCGTCGTAGTTCCGACCATAAACGATGCCGACCGGCGATGCGGCGGCGTTATTCCCATGACCCGCCGGGCAGCTTCCGGGAAACCAAAGTCTTTGGGTTCCGGGGGGAGTATGGTTGCAAAGCTGAAACTTAAAGGAATTGACGGAAGGGCACCACCAGGAGTGGAGCCTGCGGCTTAATTTGACTCAACACGGGAAACCTCACCCGGCCCGGACACGGACAGGATTGACAGATTGATAGCTCTTTCTCGATTCCGTGGGTGGTGGTGCATGGCCGTTCTTAGTTGGTGGAGCGATTTGTCTGGTTAATTCCGATAACGAACGAGACTCTGGCATGCTAACTAGTTACGCGACCCCCGAGCGGTCGGCGTCCCCCAACTTCTTAGAGGGACAAGTGGCGTTCAGCCACCCGAGATTGAGCAATAACAGGTCTGTGATGCCCTTAGATGTCCGGGGCTGCACGCGCGCTACACTGACTGGCTCAGCGTGTGCCTACCCTACGCCGGCAGGCGCGGGTAACCCGTTGAACCCCATTCGTGATGGGGATCGGGGATTGCAATTATTCCCCATGAACGAGGAATTCCCAGTAAGTGCGGGTCATAAGCTTGCGTTGATTAAGTCCCTGCCCTTTGTACACACCGCCCGTCGCTACTACCGATTGGATGGTTTAGTGAGGCCCTCGGATCGGCCCCGCCGGGGTCGGCCCACGGCCCTGGCGGAGCGCTGAGAAGACGGTCGAACTTGACTATCTAGAGGAAGTAAAAGTCGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTA"
    seq = "TGAAGACAGCCACACAGATATTGCACAGACTATTTACAGATCGTTTGGTTTACATTGAGAGTCATTGCTCTACTTTTGTGCGGTAGGAAAATGAGATTTCAGCAATTCCTTTTTGCATTTTTTATTTTTATTATGAGTCTTCTCCTTATCAGCGGACAGAGACCAGTTAATTTGACCATGAGAAGAAAACTGCGCAAACACAATTGCCTTCAGAGGAGATGTATGCCTCTCCATTCACGAGTACCCTTTCCCTGAGATGAGATCTGGCTCTATCACCCAGGCTAAAGTGCAGTGGCATGATCTAGGCTAACTCCCTGGCTCAAGCGATCCTTCCACCTCAGCCTCCCAAGTACCTGGGACTACAGGCACTCACGGCCACACCTGACTAATTTTTGTATTTTTTTGTAGAGATGGAGTATCGCCATGTTGCCCAGCTTCCTTTGAGGAATGAAAATCATTGTTTGCTGTACATTTGATCAGAAGAAAAAAGAAAAACTGAAATTAGTGAAGTCAGTGAAGTCTTCGGTCCCGTCCTGAATCATTTTTACCCTCTGTTTAGGGACAGGTCTAGAACGAGTGAGCACAAAACTGAAGAGTGTGCCGAAAATCTCAGCAATCAAGATAACATTTGAACTCCATTTTTGAAAAAAATAAAAACTAACACCCACGAAAAA"
    orf_info = get_max_orf(seq2)
    print(get_ribosome_coverage(seq2, orf_info[0], orf_info[1], trna))


#paraphase()



